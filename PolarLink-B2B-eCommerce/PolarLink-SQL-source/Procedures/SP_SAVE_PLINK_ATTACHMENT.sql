SET PATH *LIBL ;

CREATE OR REPLACE PROCEDURE SP_SAVE_PLINK_ATTACHMENT ( 
	IN IN_PLAT_ORDER_NO DECIMAL(8, 0) , 
	IN IN_PLAT_UPL_FILENAME VARCHAR(80) , 
	IN IN_PLAT_IFS_FILENAME VARCHAR(80) , 
	IN IN_PLAT_FILE_EXT CHAR(5) , 
	IN IN_PLAT_FILE_SIZE INTEGER , 
	IN IN_PLAT_DESCRIPTION VARCHAR(450) , 
	IN IN_USER CHAR(15) , 
	OUT OUT_PLAT_ATTACH_NO INTEGER , 
	OUT OUT_MESSAGE VARCHAR(100) ) 
	LANGUAGE SQL 
	SPECIFIC SP_SAVE_PLINK_ATTACHMENT 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *NONE , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = *NONE , 
	DYNDFTCOL = *NO , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	BEGIN 
/*================================================================================ 
Created June 2016 by John Valance 
Insert a record into the PLink_Attachment table. 
=================================================================================*/ 
SET OUT_MESSAGE = ' ' ; 
  
	IF NOT EXISTS ( 
		SELECT * 
		FROM ECH_PLNK 
		WHERE HORD = IN_PLAT_ORDER_NO 
	) THEN 
		SET OUT_MESSAGE = 
			'Record not added: Order Number ' 
			|| TRIM ( CHAR ( IN_PLAT_ORDER_NO ) ) 
			|| ' does not exist in the PolarLink Orders table (ECH_PLNK).' ; 
		RETURN ; 
	END IF ; 
  
	SELECT ( INTEGER ( IFNULL ( MAX ( PLAT_ATTACH_NO ) , 0 ) + 1 ) ) 
	INTO OUT_PLAT_ATTACH_NO 
	FROM PLINK_ATTACHMENT WHERE PLAT_ORDER_NO = IN_PLAT_ORDER_NO ; 
  
	INSERT INTO PLINK_ATTACHMENT ( 
		PLAT_ORDER_NO , 
		PLAT_ATTACH_NO , 
		PLAT_UPL_FILENAME , 
		PLAT_IFS_FILENAME , 
		PLAT_FILE_EXT , 
		PLAT_FILE_SIZE , 
		PLAT_DESCRIPTION , 
		PLAT_CRT_USER , 
		PLAT_CRT_TIME 
	) VALUES ( 
		IN_PLAT_ORDER_NO , 
		OUT_PLAT_ATTACH_NO , 
		IN_PLAT_UPL_FILENAME , 
		IN_PLAT_IFS_FILENAME , 
		IN_PLAT_FILE_EXT , 
		IN_PLAT_FILE_SIZE , 
		IN_PLAT_DESCRIPTION , 
		IN_USER , 
		CURRENT TIMESTAMP 
	) ; 
  
  
END  ; 
  
GRANT ALTER , EXECUTE   
ON SPECIFIC PROCEDURE SP_SAVE_PLINK_ATTACHMENT 
TO JVALANCE ; 
  
;
